$(function () {
	preLoader()
	sliderInit()
	btnMenu()
	replaceHash()
	lenisSetup()
	AOS.init({
		duration: 1200,
		disable: "mobile",
	});
	gsap.to(".rotating-circle", {
		rotation: 360,
		duration: 10,
		repeat: -1,
		ease: "linear",
		transformOrigin: "50% 50%"
	});
})

function preLoader() {
	const preloader = document.querySelector(".preloader");
	if (!preloader) return;

	const tl = gsap.timeline();

	tl.to(".svg-loader", {
			delay: 1,
			autoAlpha: 0,
			duration: 0.5,
			ease: "power1.out"
		})
		.to(".preloader .bar", {
			height: 0,
			stagger: 0.09,
			duration: 0.6,
			ease: "power4.inOut"
		})
		.to(".preloader", {
			yPercent: -100,
			duration: 0.6,
			ease: "power2.inOut"
		})
		.set(".preloader", {
			display: "none"
		})

		// Optional: Animate navbar elements after preloader hides
		.from(".navbar-brand > img", {
			x: -50,
			autoAlpha: 0,
			duration: 0.6,
			ease: "power2.out"
		})
		.from(".header-main__nav > li", {
			autoAlpha: 0,
			x: 100,
			stagger: 0.1,
			duration: 0.5,
			ease: "power2.out"
		}, "-=0.4")
		.from('.main_banner_content', {
			autoAlpha: 0,
			yPercent: 100,
			stagger: 0.05
		})
}

function lenisSetup() {
	const lenis = new Lenis({
		duration: 1.5,
		easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
		smooth: true,
		mouseMultiplier: 1,
	});

	function raf(time) {
		lenis.raf(time);
		requestAnimationFrame(raf);
	}
	requestAnimationFrame(raf);
	document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
		anchor.addEventListener("click", function (e) {
			e.preventDefault();
			lenis.scrollTo(this.getAttribute("href"));
		});
	});
	lenis.scrollTo("top");
}

function replaceHash() {
	document.querySelectorAll("a").forEach((a) => {
		let href = a.getAttribute("href");
		a.href = href ?
			href.startsWith("#") && href.endsWith("#") ?
			href.replace("#", "javascript:void(0)") :
			href :
			"javascript:void(0)";
	});
}

function btnMenu() {
	const body = document.querySelector("body");
	const ham = document.querySelector(".btn-menu");
	const menu = document.querySelector('.menulist ul');
	const links = menu.querySelectorAll('li');

	// GSAP timeline
	const tl = gsap.timeline({
		paused: true
	});
	tl.to(menu, {
		duration: 1,
		opacity: 1,
		ease: 'expo.inOut',
	});

	tl.from(links, {
		duration: 1,
		opacity: 0,
		y: 20,
		stagger: 0.2,
		ease: 'expo.inOut',
	}, "-=0.5");

	// Toggle menu and animation on click
	ham.addEventListener("click", () => {
		body.classList.toggle("isopen");

		if (body.classList.contains("isopen")) {
			tl.play();
		} else {
			tl.reverse();
		}
	});
}

function sliderInit() {
	var customer_slider = new Swiper('.customer_slider', {
		loop: true,
		autoplay: true,
		slidesPerView: 1,
		spaceBetween: 10,
		centeredSlides: true,
		roundLengths: true,
		breakpoints: {
			1199: {
				slidesPerView: 2.25,
				spaceBetween: 30
			},
			768: {
				slidesPerView: 2,
				spaceBetween: 28
			},
			576: {
				slidesPerView: 1.75,
				spaceBetween: 22
			},
			375: {
				slidesPerView: 1,
				spaceBetween: 18
			}
		},
		scrollbar: {
			el: ".swiper-scrollbar",
		},
		navigation: {
			nextEl: ".swiper-button-next",
			prevEl: ".swiper-button-prev",
		},
		pagination: {
			el: ".swiper-pagination",
			clickable: true,
		},
	});

	var service_swiper = new Swiper('.service_swiper', {
		loop: true,
		autoplay: true,
		slidesPerView: 1,
		spaceBetween: 20,
		breakpoints: {
			1024: {
				slidesPerView: 3,
				spaceBetween: 20
			},
			768: {
				slidesPerView: 2,
				spaceBetween: 20
			},			
			576: {
				slidesPerView: 2.25,
				spaceBetween: 10
			},
			375: {
				slidesPerView: 1,
				spaceBetween: 10
			}
		},
		navigation: {
			nextEl: '.swiper-button-next',
			prevEl: '.swiper-button-prev'
		},
		scrollbar: {
			el: '.swiper-scrollbar'
		}
	});
}

function initMarqueeScroll() {
	// Scrolling Letters Both Direction
	// https://codepen.io/GreenSock/pen/rNjvgjo
	// Fixed example with resizing
	// https://codepen.io/GreenSock/pen/QWqoKBv?editors=0010

	$('.marquee-group').each(function (index) {

		var marqueeGroup = $(this);

		var marqueeItemsCount = marqueeGroup.find(".marquee-content").length;
		var marqueeItemsWidth = marqueeGroup.find(".marquee-content").width();
		var marqueeSpeed = marqueeGroup.find("[data-marquee-speed]").attr('data-marquee-speed') * (marqueeItemsWidth / $(window).width());

		if ($(window).width() <= 600) {
			marqueeSpeed = marqueeSpeed * 0.5;
		}

		let direction = 1; // 1 = forward, -1 = backward scroll

		const marqueeLeft = roll(marqueeGroup.find("[data-marquee-direction='left'] .marquee-content"), {
				duration: marqueeSpeed
			}),
			marqueeRight = roll(marqueeGroup.find("[data-marquee-direction='right'] .marquee-content"), {
				duration: marqueeSpeed
			}, true),
			scroll = ScrollTrigger.create({
				trigger: document.querySelector('[data-scroll-container]'),
				onUpdate(self) {
					if (self.direction !== direction) {
						direction *= -1;
						gsap.to([marqueeLeft, marqueeRight], {
							timeScale: direction,
							overwrite: true
						});
					}
					self.direction === -1 ? marqueeGroup.find("[data-marquee-status]").attr('data-marquee-status', 'normal') : marqueeGroup.find("[data-marquee-status]").attr('data-marquee-status', 'inverted');
				}
			});

		// helper function that clones the targets
		function roll(targets, vars, reverse) {
			vars = vars || {};
			vars.ease || (vars.ease = "none");
			const tl = gsap.timeline({
					repeat: -1,
					onReverseComplete() {
						this.totalTime(this.rawTime() + this.duration() * 10);
					}
				}),
				elements = gsap.utils.toArray(targets),
				clones = elements.map(el => {
					let clone = el.cloneNode(true);
					el.parentNode.appendChild(clone);
					return clone;
				}),
				positionClones = () => elements.forEach((el, i) => gsap.set(clones[i], {
					position: "absolute",
					overwrite: false,
					top: el.offsetTop,
					left: el.offsetLeft + (reverse ? -el.offsetWidth : el.offsetWidth)
				}));
			positionClones();
			elements.forEach((el, i) => tl.to([el, clones[i]], {
				xPercent: reverse ? 100 : -100,
				...vars
			}, 0));
			window.addEventListener("resize", () => {
				let time = tl.totalTime();
				tl.totalTime(0);
				positionClones();
				tl.totalTime(time);
			});
			return tl;
		}

	});
}
initMarqueeScroll()

/**
 * Sticky Cursor with Delay
 */
function initStickyCursorWithDelay() {

	// Sticky Cursor with delay
	// https://greensock.com/forums/topic/21161-animated-mouse-cursor/
	var cursorFill = $(".custom-cursor-fill");
	var cursorSpan = $(".custom-cursor-span");

	var posXFill = -200
	var posYFill = -200
	var posXSpan = -200
	var posYSpan = -200
	var mouseX = -200
	var mouseY = -200

	if (document.querySelector(".custom-cursor-fill, .custom-cursor-span")) {
		gsap.to({}, 0.0083333333, {
			repeat: -1,
			onRepeat: function () {

				if (cursorFill) {
					posXFill += (mouseX - posXFill) / 3;
					posYFill += (mouseY - posYFill) / 3;
					gsap.set(cursorFill, {
						css: {
							left: posXFill,
							top: posYFill
						}
					});
				}
				if (cursorSpan) {
					posXSpan += (mouseX - posXSpan) / 2.75;
					posYSpan += (mouseY - posYSpan) / 2.75;
					gsap.set(cursorSpan, {
						css: {
							left: posXSpan,
							top: posYSpan
						}
					});
				}
			}
		});
	}

	$(document).on("mousemove", function (e) {
		mouseX = e.clientX;
		mouseY = e.clientY;
	});

	// Pressed
	$(document).on('mousedown', function () {
		cursorFill.add(cursorSpan).addClass('pressed');
	});
	$(document).on('mouseup', function () {
		cursorFill.add(cursorSpan).removeClass('pressed');
	});

	// Home Header Hover

	$('.feel_section, .greener_section, .opuljet_section').on('mouseenter', function () {
		cursorFill.add(cursorSpan).addClass('cursor-home');
		cursorFill.add(cursorSpan).removeClass('cursor-close');
	});
	$('.feel_section, .greener_section, .opuljet_section').on('mouseleave', function () {
		cursorFill.add(cursorSpan).removeClass('cursor-home');
	});

	// Hover Cursor
	if (window.innerWidth > 1024) {
		if (document.querySelector(".custom-cursor-fill")) {
			$(".custom-cursor-fill").each(function (index) {
				let triggerElement = $(".hover-rotate-cursor");
				let targetElementSVG = $(this).find("svg");

				let tl = gsap.timeline({
					paused: true
				});

				tl.to(targetElementSVG, {
					rotation: 18,
					transformOrigin: 'center',
					duration: .3,
					repeat: -1,
					ease: 'none'
				});

				triggerElement.hover(function (index) {
					tl.restart();
				}, function () {
					tl.kill();
				});

			});
		}
	}
}
initStickyCursorWithDelay()

function initMagneticButtons() {

	// Magnetic Buttons
	// Found via: https://codepen.io/tdesero/pen/RmoxQg
	var magnets = document.querySelectorAll('.magnetic');
	var strength = 100;

	// START : If screen is bigger as 540 px do magnetic
	if (window.innerWidth > 540) {
		// Mouse Reset
		magnets.forEach((magnet) => {
			magnet.addEventListener('mousemove', moveMagnet);
			$(this.parentNode).removeClass('not-active');
			magnet.addEventListener('mouseleave', function (event) {
				gsap.to(event.currentTarget, 1.5, {
					x: 0,
					y: 0,
					ease: Elastic.easeOut
				});
				gsap.to($(this).find(".btn-text"), 1.5, {
					x: 0,
					y: 0,
					ease: Elastic.easeOut
				});
			});
		});

		// Mouse move
		function moveMagnet(event) {
			var magnetButton = event.currentTarget;
			var bounding = magnetButton.getBoundingClientRect();
			var magnetsStrength = magnetButton.getAttribute("data-strength");
			var magnetsStrengthText = magnetButton.getAttribute("data-strength-text");

			gsap.to(magnetButton, 1.5, {
				x: (((event.clientX - bounding.left) / magnetButton.offsetWidth) - 0.5) * magnetsStrength,
				y: (((event.clientY - bounding.top) / magnetButton.offsetHeight) - 0.5) * magnetsStrength,
				rotate: "0.001deg",
				ease: Power4.easeOut
			});
			gsap.to($(this).find(".btn-text"), 1.5, {
				x: (((event.clientX - bounding.left) / magnetButton.offsetWidth) - 0.5) * magnetsStrengthText,
				y: (((event.clientY - bounding.top) / magnetButton.offsetHeight) - 0.5) * magnetsStrengthText,
				rotate: "0.001deg",
				ease: Power4.easeOut
			});
		}

	}; // END : If screen is bigger as 540 px do magnetic

	// Mouse Enter
	$('.magnetic').on('mouseenter', function () {
		if ($(this).find(".btn-fill").length) {
			gsap.to($(this).find(".btn-fill"), .6, {
				startAt: {
					y: "76%"
				},
				y: "0%",
				ease: Power2.easeInOut
			});
		}
		if ($(this).find(".btn-text-inner.change").length) {
			gsap.to($(this).find(".btn-text-inner.change"), .3, {
				startAt: {
					color: "#1C1D20"
				},
				color: "#FFFFFF",
				ease: Power3.easeIn,
			});
		}
		$(this.parentNode).removeClass('not-active');
	});

	// Mouse Leave
	$('.magnetic').on('mouseleave', function () {
		if ($(this).find(".btn-fill").length) {
			gsap.to($(this).find(".btn-fill"), .6, {
				y: "-76%",
				ease: Power2.easeInOut
			});
		}
		if ($(this).find(".btn-text-inner.change").length) {
			gsap.to($(this).find(".btn-text-inner.change"), .3, {
				color: "#fff",
				ease: Power3.easeOut,
				delay: .3
			});
		}
		$(this.parentNode).removeClass('not-active');
	});
}

initMagneticButtons()

function imgRevealer() {
	let revealContainers = document.querySelectorAll('.reveal');
	revealContainers.forEach((container) => {
		let image = container.querySelector('img');
		let revelerTl = gsap.timeline({
			scrollTrigger: {
				trigger: container,
				toggleActions: 'restart none none reverse'
			}
		});
		revelerTl.set(container, {
			autoAlpha: 1
		});
		revelerTl.from(container, 0.75, {
			xPercent: -100,
			ease: Power2.out
		});
		revelerTl.from(image, 0.75, {
			xPercent: 100,
			scale: 1.3,
			delay: -0.75,
			ease: Power2.out
		});
	});
}


// First, split all elements with [text-split] into words
let typeSplit = new SplitType("[text-split]", {
	types: "words",
	tagName: "span"
});

// Animate each element with [scrub-each-word]
document.querySelectorAll("[scrub-each-word]").forEach((el) => {
	let tl = gsap.timeline({
		scrollTrigger: {
			trigger: el,
			start: "top 40%",
			toggleActions: "play reverse play reverse",
			scrub: true
		}
	});

	tl.from(el.querySelectorAll(".word"), {
		opacity: 0.2,
		duration: 0.2,
		ease: "power1.out",
		stagger: {
			each: 0.4
		}
	});
});

// Optional: avoid flash of unstyled text
gsap.set("[text-split]", {
	opacity: 1
});

function headingAnimation() {
	const headings = document.querySelectorAll(".heading");

	headings.forEach((text) => {
		let text1 = new SplitType(text, {
			types: "chars",
		});

		const headingTl = gsap.timeline({
			scrollTrigger: {
				trigger: text,
				start: "top 50%",
				toggleActions: "play reverse play reverse",
				scrub: true, // Allow the animation to be controlled by the scrollbar
			},
		});

		let chars = text.querySelectorAll(".char");
		headingTl
			.from(chars, {
				// duration: 1.5,
				// x: () => gsap.utils.random(-100, 100), // Random x-axis movement
				// y: () => gsap.utils.random(-100, 100), // Random y-axis movement
				// rotation: () => gsap.utils.random(-360, 360), // Random rotation
				// autoAlpha: 0,
				// stagger: 0.05,
				// ease: "elastic.out(1, 0.3)", // Elastic easing for a bounce effect
				// color: "#1a1a1a",
				// scale: 0.5,
				// delay: 0.2,
				opacity: 0,
				duration: 0.05,
				ease: "power1.out",
				stagger: {
					amount: 0.4,
					from: "random"
				}
			})
			.to(
				chars, {
					duration: 0.5,
					scale: 1,
					// color: "#333", // Revert to the original color
					ease: "power1.inOut",
				},
				"-=0.5"
			); // Overlap with the end of the initial animation
	});
}
headingAnimation();

function createFlightRow(isDefault = false) {
	const wrapper = document.createElement('div');
	wrapper.className = 'flight-bar';
	wrapper.innerHTML = `
        <i class="fas fa-plane"></i>
        <input type="text" placeholder="From" required>
        <i class="fas fa-plane"></i>
        <input type="text" placeholder="To" required>
        <i class="fas fa-calendar"></i>
        <input type="date" required>
        <button type="button" class="add-return-btn" onclick="this.nextElementSibling.style.display='inline-block'; this.style.display='none';">Add return</button>
        <input type="date" style="display:none;">
        <div class="passenger-selector">
          <i class="fas fa-minus" onclick="adjustPassengers(this, -1)"></i>
          <span>1 Passenger</span>
          <i class="fas fa-plus" onclick="adjustPassengers(this, 1)"></i>
        </div>
        ${isDefault ? '' : '<button type="button" class="remove-flight-btn" onclick="this.parentElement.remove()"><i class="fas fa-times"></i></button>'}
      `;
	return wrapper;
}

function adjustPassengers(elem, change) {
	let span = elem.parentElement.querySelector('span');
	let current = parseInt(span.textContent);
	let newVal = Math.max(1, current + change);
	span.textContent = `${newVal} Passenger${newVal > 1 ? 's' : ''}`;
}

document.getElementById('addFlightBtn').addEventListener('click', function () {
	document.getElementById('flightsContainer').appendChild(createFlightRow());
});

document.getElementById('flightForm').addEventListener('submit', function (event) {
	event.preventDefault();
	alert('Flight request submitted successfully!');
});

document.addEventListener('DOMContentLoaded', function () {
	document.getElementById('flightsContainer').appendChild(createFlightRow(true));
});


const canvas = document.querySelector("canvas");

if (canvas) {
	const context = canvas.getContext("2d");

	const frames = {
		currentIndex: 0,
		maxIndex: 500
	};

	const images = [];
	let imagesLoaded = 0;

	function preloadImages() {
		for (let i = 1; i <= frames.maxIndex; i++) {
			const imageUrl = `images/new-frame/frame_${i.toString().padStart(4, "0")}.webp`;
			const img = new Image();
			img.src = imageUrl;

			img.onload = function () {
				imagesLoaded++;

				// Show first image as soon as it's available
				if (imagesLoaded === 1) {
					loadImage(0);
				}

				// When all images are loaded
				if (imagesLoaded === frames.maxIndex) {
					loadImage(0);
					startAnimation();
				}
			};

			images.push(img);
		}
	}

	function loadImage(index) {
		if (index >= 0 && index <= frames.maxIndex) {
			const img = images[index];

			if (!img || !img.complete) {
				setTimeout(() => loadImage(index), 100);
				return;
			}

			canvas.width = window.innerWidth;
			canvas.height = window.innerHeight;

			const scaleX = canvas.width / img.width;
			const scaleY = canvas.height / img.height;
			const scale = Math.max(scaleX, scaleY);

			const newWidth = img.width * scale;
			const newHeight = img.height * scale;

			const offsetX = (canvas.width - newWidth) / 2;
			const offsetY = (canvas.height - newHeight) / 2;

			context.clearRect(0, 0, canvas.width, canvas.height);
			context.imageSmoothingEnabled = true;
			context.imageSmoothingQuality = "high";
			context.drawImage(img, offsetX, offsetY, newWidth, newHeight);

			frames.currentIndex = index;
		}
	}

	function startAnimation() {
		gsap.timeline({
			scrollTrigger: {
				trigger: ".main_banner",
				start: "top top",
				end: "bottom center",
				scrub: 1,
				pin: true,
				onLeaveBack: () => loadImage(0),
				onLeave: () => loadImage(frames.maxIndex),
				onUpdate: (self) => {
					const index = Math.floor(self.progress * frames.maxIndex);
					loadImage(index);
				}
			}
		});

		// Responsive h1 animation
		const mm = gsap.matchMedia();

		mm.add({
			isMobile: "(max-width: 767px)",
			isTablet: "(min-width: 768px) and (max-width: 1023px)",
			isDesktop: "(min-width: 1024px)"
		}, (context) => {
			let { isMobile, isTablet, isDesktop } = context.conditions;

			gsap.timeline({
				scrollTrigger: {
					trigger: ".main_banner",
					start: "top top",
					end: "bottom top",
					scrub: true
				}
			})
			.to(".main_banner_content h1", {
				y: "-50vh",
				fontSize: isMobile
					? "2.5rem"
					: isTablet
					? "4.5rem"
					: "7rem",
				ease: "power2.out"
			});
		});
	}

	window.addEventListener("resize", () => {
		loadImage(frames.currentIndex);
	});

	preloadImages();
}
